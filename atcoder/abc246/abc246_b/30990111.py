import os
import sys
from importlib.machinery import ModuleSpec, SourceFileLoader


class BundleImporter(SourceFileLoader):
    """Importer that supports importing from strings in code.

    This class is automatically generated by expander.
    """

    module_ispkg = dict()
    module_code = dict()

    @classmethod
    def add_module(cls, fullname, is_package, code):
        cls.module_ispkg[fullname] = is_package
        cls.module_code[cls.get_filename(fullname)] = bytes(code, encoding="utf-8")

    @classmethod
    def find_spec(cls, fullname, path=None, target=None):
        if fullname in cls.module_ispkg:
            return ModuleSpec(
                fullname,
                cls(fullname, ""),
                is_package=cls.module_ispkg[fullname],
            )
        else:
            return None

    @classmethod
    def get_filename(cls, fullname):
        return fullname.replace(".", "_") + ".py"

    def get_data(self, path):
        try:
            return self.module_code[path]
        except KeyError:
            with open(path, "rb") as file:
                return file.read()

    def path_stats(self, path):
        return {"mtime": os.stat(__file__).st_mtime, "size": None}


BundleImporter.add_module(
    fullname="byslib",
    is_package=True,
    code="""\
\"""
procon library by bayashi-cl
github repository: https://github.com/bayashi-cl/byslib-python

This library can be expanded with expander.
 - https://github.com/bayashi-cl/expander
\"""

__version__ = "0.0.2"
""",
)

BundleImporter.add_module(
    fullname="byslib.core",
    is_package=True,
    code="""\
""",
)

BundleImporter.add_module(
    fullname="byslib.core.config",
    is_package=False,
    code="""\
import sys
from typing import Callable


def procon_setup(main: Callable[..., None]) -> Callable[..., None]:
    sys.setrecursionlimit(10**7)

    def wrapper(case: int = 1) -> None:
        for i in range(case):
            main(case=i + 1)

    return wrapper
""",
)

BundleImporter.add_module(
    fullname="byslib.core.const",
    is_package=False,
    code="""\
import sys

MOD: int = 998244353
MOD7: int = 1000000007
INF: float = float("Inf")
IINF: int = sys.maxsize // 2
""",
)

BundleImporter.add_module(
    fullname="byslib.core.fastio",
    is_package=False,
    code="""\
import io
import os
import sys
from functools import partial
from typing import Union

readline = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline
debug = partial(print, file=sys.stderr)


def sinput() -> str:
    return readline().decode().rstrip()


def int1(s: Union[str, bytes]) -> int:
    return int(s) - 1
""",
)

BundleImporter.add_module(
    fullname="byslib.geometry",
    is_package=True,
    code="""\
""",
)

BundleImporter.add_module(
    fullname="byslib.geometry.geometry",
    is_package=False,
    code="""\
import math
import numbers
from dataclasses import dataclass
from typing import Generic, TypeVar, Union

Real = Union[int, float]
EPS = 1e-9


def sign(x: float) -> int:
    if x < -EPS:
        return -1
    elif x > EPS:
        return 1
    else:
        return 0


@dataclass
class Point:
    x: Real
    y: Real

    def __add__(self, other: Union["Point", Real]) -> "Point":
        if isinstance(other, Point):
            return Point(self.x + other.x, self.y + other.y)
        else:
            return Point(self.x + other, self.y + other)

    def __sub__(self, other: Union["Point", Real]) -> "Point":
        if isinstance(other, Point):
            return Point(self.x - other.x, self.y - other.y)
        else:
            return Point(self.x - other, self.y - other)

    def __mul__(self, other: Real) -> "Point":
        return Point(self.x * other, self.y * other)

    def __truediv__(self, other: Real) -> "Point":
        return Point(self.x / other, self.y / other)

    def __iadd__(self, other: Union["Point", Real]) -> "Point":
        if isinstance(other, Point):
            self.x += other.x
            self.y += other.y
        else:
            self.x += other
            self.y += other
        return self

    def __isub__(self, other: Union["Point", Real]) -> "Point":
        if isinstance(other, Point):
            self.x -= other.x
            self.y -= other.y
        else:
            self.x -= other
            self.y -= other
        return self

    def __imul__(self, other: Real) -> "Point":
        if isinstance(other, Point):
            self.x += other.x
            self.y += other.y
        else:
            self.x += other
            self.y += other
        return self

    def __itruediv__(self, other: Real) -> "Point":
        self.x /= other
        self.y /= other
        return self

    def __eq__(self, other: object) -> bool:
        if not isinstance(other, Point):
            return False
        return math.isclose(self.x, other.x) and math.isclose(self.y, other.y)

    def __ne__(self, other: object) -> bool:
        return not self == other

    def norm2(self) -> Real:
        return self.x**2 + self.y**2

    def norm(self) -> float:
        return math.sqrt(self.norm2())

    def normalized(self) -> "Point":
        n = self.norm()
        return Point(self.x / n, self.y / n)

    def angle(self) -> float:
        return math.atan2(self.y, self.x)

    def quadrant(self) -> int:
        if sign(self.y) >= 0:
            return 1 if sign(self.x) >= 0 else 2
        return 4 if sign(self.x) >= 0 else 3

    def normal(self) -> "Point":
        return Point(-self.normalized().y, self.normalized().x)

    def manhattan_rotate(self) -> "Point":
        return Point(self.x - self.y, self.x + self.y)

    def rotate(self, theta: float) -> "Point":
        ct = math.cos(theta)
        st = math.sin(theta)
        return Point(self.x * ct - self.y * st, self.x * st + self.y * ct)

    def dot(self, other: "Point") -> Real:
        return self.x * other.x + self.y * other.y

    def det(self, other: "Point") -> Real:
        return self.x * other.y - self.y * other.x

    def projection(self, to: "Point") -> "Point":
        return to * (self.dot(to) / to.norm2())

    def __lt__(self, other: "Point") -> bool:
        q = self.quadrant()
        oq = other.quadrant()
        if q != oq:
            return q < oq
        return sign(self.det(other)) > 0

    def __repr__(self) -> str:
        return f"{self.x} {self.y}"


if __name__ == "__main__":
    p = Point(3, 4)
    print(p.norm())
""",
)

sys.meta_path.append(BundleImporter)

from byslib.core.config import procon_setup
from byslib.core.const import IINF, MOD
from byslib.core.fastio import debug, readline, sinput
from byslib.geometry.geometry import Point


@procon_setup
def main(**kwargs) -> None:
    p = Point(*map(int, readline().split()))
    print(p.normalized())


if __name__ == "__main__":
    t = 1
    # t = int(readline())
    main(t)


# package infomations
# -----------------------------------------------------------------------------
# byslib-python
#   Version  : 0.0.2
#   Author   : bayashi-cl
#   Home-page: https://bayashi-cl.github.io/byslib-python/
#   License  : CC0
# -----------------------------------------------------------------------------
