import os
import sys
from importlib.machinery import ModuleSpec, SourceFileLoader


class BundleImporter(SourceFileLoader):
    """Importer that supports importing from strings in code.

    This class is automatically generated by expander.
    """

    module_ispkg = dict()
    module_code = dict()

    @classmethod
    def add_module(cls, fullname, is_package, code):
        cls.module_ispkg[fullname] = is_package
        cls.module_code[cls.get_filename(fullname)] = bytes(code, encoding="utf-8")

    @classmethod
    def find_spec(cls, fullname, path=None, target=None):
        if fullname in cls.module_ispkg:
            return ModuleSpec(
                fullname,
                cls(fullname, ""),
                is_package=cls.module_ispkg[fullname],
            )
        else:
            return None

    @classmethod
    def get_filename(cls, fullname):
        return fullname.replace(".", "_") + ".py"

    def get_data(self, path):
        try:
            return super().get_data(path)
        except OSError:
            try:
                return self.module_code[path]
            except KeyError:
                raise OSError

    def path_stats(self, path):
        return {"mtime": os.stat(__file__).st_mtime, "size": None}


BundleImporter.add_module(
    fullname="byslib",
    is_package=True,
    code="""\
\"""
procon library by bayashi-cl
github repository: https://github.com/bayashi-cl/byslib-python

This library can be expanded with expander.
 - https://github.com/bayashi-cl/expander
\"""

__version__ = "0.1.0"
""",
)

BundleImporter.add_module(
    fullname="byslib.core",
    is_package=True,
    code="""\
# @title Core Featule
""",
)

BundleImporter.add_module(
    fullname="byslib.core.config",
    is_package=False,
    code="""\
# @title setup
import sys
from typing import Callable


def procon_setup(main: Callable[..., None]) -> Callable[..., None]:
    \"""setup

    Notes
    -----
    * Set recursionlimit to 1e7
    * Repeat main function for testcases
    * If exception raised, indicate in which test case it was raised.
    \"""

    def wrapper(case: int = 1) -> None:
        sys.setrecursionlimit(10**7)
        for i in range(case):
            try:
                main(case=i + 1)
            except Exception as e:
                print(
                    f"❌ {type(e).__name__} raised in tastcase {i + 1}.",
                    file=sys.stderr,
                )
                raise

    return wrapper
""",
)

BundleImporter.add_module(
    fullname="byslib.core.fastio",
    is_package=False,
    code="""\
# @title Fast I/O
import io
import os
import sys
from typing import Union

if "USER" in os.environ:
    import inspect

    readline = sys.stdin.buffer.readline

    def debug(*args, sep: str = " ") -> None:
        line = inspect.getouterframes(inspect.currentframe())[1].lineno
        header = f"📌 line{line:>4}: "
        space = "\\n" + " " * (len(header) + 1)
        out = header + sep.join(map(str, args)).replace("\\n", space)
        print(out, file=sys.stderr)

else:
    readline = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline

    def debug(*args, sep: str = " ") -> None:
        pass


def sinput() -> str:
    return readline().decode().rstrip()


def int1(s: Union[str, bytes]) -> int:
    return int(s) - 1
""",
)

sys.meta_path.append(BundleImporter)

from collections import defaultdict
from typing import List, Optional, Tuple

import numpy as np
from byslib.core.config import procon_setup
from byslib.core.fastio import readline


@procon_setup
def main(**kwargs) -> None:
    op = [
        np.zeros((3, 3), dtype=np.int64),
        np.array([[0, 1, 0], [-1, 0, 0], [0, 0, 1]], dtype=np.int64),
        np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]], dtype=np.int64),
        np.array([[-1, 0, 2], [0, 1, 0], [0, 0, 1]], dtype=np.int64),
        np.array([[1, 0, 0], [0, -1, 2], [0, 0, 1]], dtype=np.int64),
    ]

    n = int(readline())
    pones = []
    for _ in range(n):
        x, y = map(int, readline().split())
        pones.append(np.array([x, y, 1]))

    m = int(readline())
    manip = [tuple(map(int, readline().split())) for _ in range(m)]
    manip.append((0,))

    q = int(readline())
    que = defaultdict(list)
    for qi in range(q):
        a, b = map(int, readline().split())
        que[a].append((b - 1, qi))

    ans: List[Optional[Tuple[int, int]]] = [None] * q
    hist = np.eye(3, 3, dtype=np.int64)
    for i, mi in enumerate(manip):
        if i in que:
            for b, idx in que[i]:
                x, y, _ = hist @ pones[b]
                ans[idx] = (x, y)

        t = mi[0]
        if t == 0:
            continue
        mat = op[t]
        if t == 3:
            mat[0, 2] = 2 * mi[1]
        if t == 4:
            mat[1, 2] = 2 * mi[1]

        hist = mat @ hist

    for e in ans:
        print(*e)


if __name__ == "__main__":
    t = 1
    # t = int(readline())
    main(t)

# package infomations
# -----------------------------------------------------------------------------
# byslib-python
#   Version  : 0.1.0
#   Author   : bayashi-cl
#   Home-page: https://bayashi-cl.github.io/byslib-python/
#   License  : CC0
# -----------------------------------------------------------------------------
