import os
import sys
from importlib.machinery import ModuleSpec, SourceFileLoader


class BundleImporter(SourceFileLoader):
    """Importer that supports importing from strings in code.

    This class is automatically generated by expander.
    """

    module_ispkg = dict()
    module_code = dict()

    @classmethod
    def add_module(cls, fullname, is_package, code):
        cls.module_ispkg[fullname] = is_package
        cls.module_code[cls.get_filename(fullname)] = bytes(code, encoding="utf-8")

    @classmethod
    def find_spec(cls, fullname, path=None, target=None):
        if fullname in cls.module_ispkg:
            return ModuleSpec(
                fullname,
                cls(fullname, ""),
                is_package=cls.module_ispkg[fullname],
            )
        else:
            return None

    @classmethod
    def get_filename(cls, fullname):
        return fullname.replace(".", "_") + ".py"

    def get_data(self, path):
        try:
            return super().get_data(path)
        except OSError:
            try:
                return self.module_code[path]
            except KeyError:
                raise OSError

    def path_stats(self, path):
        return {"mtime": os.stat(__file__).st_mtime, "size": None}


BundleImporter.add_module(
    fullname="byslib",
    is_package=True,
    code="""\
\"""
procon library by bayashi-cl
github repository: https://github.com/bayashi-cl/byslib-python

This library can be expanded with expander.
 - https://github.com/bayashi-cl/expander
\"""

__version__ = "0.1.0"
""",
)

BundleImporter.add_module(
    fullname="byslib.core",
    is_package=True,
    code="""\
# @title Core Featule
""",
)

BundleImporter.add_module(
    fullname="byslib.core.config",
    is_package=False,
    code="""\
# @title setup
import sys
from typing import Callable


def procon_setup(main: Callable[..., None]) -> Callable[..., None]:
    \"""setup

    Notes
    -----
    * Set recursionlimit to 1e7
    * Repeat main function for testcases
    * If exception raised, indicate in which test case it was raised.
    \"""

    def wrapper(case: int = 1) -> None:
        sys.setrecursionlimit(10**7)
        for i in range(case):
            try:
                main(case=i + 1)
            except Exception as e:
                print(
                    f"❌ {type(e).__name__} raised in tastcase {i + 1}.",
                    file=sys.stderr,
                )
                raise

    return wrapper
""",
)

BundleImporter.add_module(
    fullname="byslib.core.const",
    is_package=False,
    code="""\
# @title Const
import sys

MOD: int = 998244353
MOD7: int = 1000000007
INF: float = float("Inf")
IINF: int = sys.maxsize // 2
""",
)

BundleImporter.add_module(
    fullname="byslib.core.fastio",
    is_package=False,
    code="""\
# @title Fast I/O
import io
import os
import sys
from typing import Union

readline = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline

if "USER" in os.environ:
    import inspect

    def debug(*args, sep: str = " ") -> None:
        line = inspect.getouterframes(inspect.currentframe())[1].lineno
        header = f"📌 line{line:>4}: "
        space = "\\n" + " " * (len(header) + 1)
        out = header + sep.join(map(str, args)).replace("\\n", space)
        print(out, file=sys.stderr)

else:

    def debug(*args, sep: str = " ") -> None:
        pass


def sinput() -> str:
    return readline().decode().rstrip()


def int1(s: Union[str, bytes]) -> int:
    return int(s) - 1
""",
)

BundleImporter.add_module(
    fullname="byslib.data",
    is_package=True,
    code="""\
# @title Data Structure
""",
)

BundleImporter.add_module(
    fullname="byslib.data.segment_tree",
    is_package=False,
    code="""\
# @title Segment Tree
from typing import Callable, Generic, List, TypeVar

T = TypeVar("T")


class SegmentTree(Generic[T]):
    r\"""Segment Tree

    Parameters
    ----------
    Generic[T]
        Set type of Monoid

    Notes
    -----
    Time complexity

    * build : :math:`O(N)`
    * Point set : :math:`O(\\log(N))`
    * Range fold : :math:`O(\\log(N))`

    References
    ----------
    ..[1] 🐜 p.153
    ..[2] https://scrapbox.io/data-structures/Segment_Tree
    ..[3] https://ikatakos.com/pot/programming_algorithm/data_structure/segment_tree

    Examples
    --------
    >>> seg = SegmentTree(max, 0, [1] * 10)
    >>> seg.set(3, 4)
    >>> seg.set(8, 9)
    >>> print(seg.fold(0,5))
    4
    >>> len(seg)
    10
    >>> print(seg.fold_all())
    9
    >>> print(seg[3])
    4
    \"""

    def __init__(
        self, operation: Callable[[T, T], T], identity: T, array: List[T]
    ) -> None:
        \"""build

        Parameters
        ----------
        operation
            Binary operation of Monoid
        identity
            Identity of Monoid
        array
            Init array
        \"""
        self.__operation = operation
        self.__identity = identity
        self.__n = len(array)
        self.__n_leaf = 1 << (self.__n - 1).bit_length()
        self.__data = [self.__identity] * (self.__n_leaf * 2)
        self.__data[self.__n_leaf : self.__n_leaf + self.__n] = array
        for i in range(self.__n_leaf - 1, 0, -1):
            self.__data[i] = self.__operation(
                self.__data[i * 2], self.__data[i * 2 + 1]
            )

    def set(self, index: int, value: T) -> None:
        index += self.__n_leaf
        self.__data[index] = value
        index >>= 1
        while index > 0:
            self.__data[index] = self.__operation(
                self.__data[index * 2], self.__data[index * 2 + 1]
            )
            index >>= 1

    def fold(self, left: int, right: int) -> T:
        left_fold = self.__identity
        right_fold = self.__identity
        left += self.__n_leaf
        right += self.__n_leaf
        while left < right:
            if left & 1:
                left_fold = self.__operation(left_fold, self.__data[left])
                left += 1
            if right & 1:
                right -= 1
                right_fold = self.__operation(self.__data[right], right_fold)
            left >>= 1
            right >>= 1
        return self.__operation(left_fold, right_fold)

    def fold_all(self) -> T:
        return self.__data[1]

    def __getitem__(self, key: int) -> T:
        return self.__data[key + self.__n_leaf]

    def __len__(self) -> int:
        return self.__n

    @classmethod
    def zeros(cls, op: Callable[[T, T], T], ident: T, n: int) -> "SegmentTree":
        return cls(op, ident, [ident] * n)
""",
)

sys.meta_path.append(BundleImporter)

from byslib.core.config import procon_setup
from byslib.core.const import IINF, MOD
from byslib.core.fastio import debug, readline, sinput
from byslib.data.segment_tree import SegmentTree


@procon_setup
def main(**kwargs) -> None:
    n, q = map(int, readline().split())
    a = list(map(int, readline().split()))

    seg = SegmentTree(lambda a, b: a ^ b, 0, a)
    for _ in range(q):
        t, x, y = map(int, readline().split())
        x -= 1
        if t == 1:
            seg.set(x, seg[x] ^ y)
        else:
            print(seg.fold(x, y))


if __name__ == "__main__":
    t = 1
    # t = int(readline())
    main(t)

# package infomations
# -----------------------------------------------------------------------------
# byslib-python
#   Version  : 0.1.0
#   Author   : bayashi-cl
#   Home-page: https://bayashi-cl.github.io/byslib-python/
#   License  : CC0
# -----------------------------------------------------------------------------
