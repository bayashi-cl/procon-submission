import os
import sys
from importlib.machinery import ModuleSpec, SourceFileLoader


class BundleImporter(SourceFileLoader):
    """Importer that supports importing from strings in code.

    This class is automatically generated by expander.
    """

    module_ispkg = dict()
    module_code = dict()

    @classmethod
    def add_module(cls, fullname, is_package, code):
        cls.module_ispkg[fullname] = is_package
        cls.module_code[cls.get_filename(fullname)] = bytes(code, encoding="utf-8")

    @classmethod
    def find_spec(cls, fullname, path=None, target=None):
        if fullname in cls.module_ispkg:
            return ModuleSpec(
                fullname,
                cls(fullname, ""),
                is_package=cls.module_ispkg[fullname],
            )
        else:
            return None

    @classmethod
    def get_filename(cls, fullname):
        return fullname.replace(".", "_") + ".py"

    def get_data(self, path):
        try:
            return super().get_data(path)
        except OSError:
            try:
                return self.module_code[path]
            except KeyError:
                raise OSError

    def path_stats(self, path):
        return {"mtime": os.stat(__file__).st_mtime, "size": None}


BundleImporter.add_module(
    fullname="byslib",
    is_package=True,
    code="""\
\"""
procon library by bayashi-cl
github repository: https://github.com/bayashi-cl/byslib-python

This library can be expanded with expander.
 - https://github.com/bayashi-cl/expander
\"""

__version__ = "0.1.0"
""",
)

BundleImporter.add_module(
    fullname="byslib.core",
    is_package=True,
    code="""\
# @title Core Featule
""",
)

BundleImporter.add_module(
    fullname="byslib.core.config",
    is_package=False,
    code="""\
# @title setup
import sys
from typing import Callable

from .fastio import readable


def procon_setup(main: Callable[..., None]) -> Callable[..., None]:
    \"""setup

    Notes
    -----
    * Set recursionlimit to 1e7
    * Repeat main function for testcases
    * If exception raised, indicate in which test case it was raised.
    \"""

    def wrapper(case: int = 1) -> None:
        sys.setrecursionlimit(10**7)
        for i in range(case):
            try:
                main(case=i + 1)
            except Exception as e:
                print(
                    f"❌ {type(e).__name__} raised in tastcase {i + 1}.",
                    file=sys.stderr,
                )
                raise

        if readable():
            print("🔺 Unused inputs.", file=sys.stderr)

    return wrapper
""",
)

BundleImporter.add_module(
    fullname="byslib.core.fastio",
    is_package=False,
    code="""\
# @title Fast I/O
import io
import os
import sys
from typing import Union

if "USER" in os.environ:
    import inspect

    stdin = sys.stdin.buffer

    def debug(*args, sep: str = " ") -> None:
        line = inspect.getouterframes(inspect.currentframe())[1].lineno
        header = f"📌 line{line:>4}: "
        space = "\\n" + " " * (len(header) + 1)
        out = header + sep.join(map(str, args)).replace("\\n", space)
        print(out, file=sys.stderr)

else:
    stdin = io.BytesIO(os.read(0, os.fstat(0).st_size))

    def debug(*args, sep: str = " ") -> None:
        pass


readline = stdin.readline


def readable() -> bool:
    return len(stdin.read()) != 0


def sinput() -> str:
    return readline().decode().rstrip()


def int1(s: Union[str, bytes]) -> int:
    return int(s) - 1
""",
)

BundleImporter.add_module(
    fullname="byslib.core.const",
    is_package=False,
    code="""\
# @title Const
import sys

MOD: int = 998244353
MOD7: int = 1000000007
INF: float = float("Inf")
IINF: int = sys.maxsize // 2
""",
)

BundleImporter.add_module(
    fullname="byslib.data",
    is_package=True,
    code="""\
# @title Data Structure
""",
)

BundleImporter.add_module(
    fullname="byslib.data.cumulative_sum",
    is_package=False,
    code="""\
# @title Cumulative Sum
from itertools import chain
from typing import List


class CumulativeSum:
    \"""Cumulative Sum

    Notes
    -----
    Get sum of semi-open interval [left, right)

    Time complexity

    * Build : :math:`O(N)`
    * fold : :math:`O(1)`

    Examples
    --------
    >>> cs = CumulativeSum([3, 1, 4, 1, 5])
    >>> print(cs.fold(0, 3))
    8
    \"""

    def __init__(self, data: List[int]) -> None:
        n = len(data)
        self.__data = [0] * (n + 1)
        for i in range(n):
            self.__data[i + 1] = self.__data[i] + data[i]

    def fold(self, left: int, right: int) -> int:
        return self.__data[right] - self.__data[left]


class CumulativeSum2D:
    \"""Cumulative Sum 2D

    Notes
    -----
    Get sum of range

    Time complexity

    * Build : :math:`O(N * M)`
    * fold : :math:`O(1)`

    Examples
    --------
    >>> cs = CumulativeSum([3, 1, 4, 1, 5])
    >>> print(cs.fold(0, 3))
    8
    \"""

    def __init__(self, data: List[List[int]]) -> None:
        n = len(data)
        m = len(data[0])
        self.__data = [[0] + row for row in chain([[0] * m], data)]
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                self.__data[i][j] += (
                    self.__data[i][j - 1]
                    + self.__data[i - 1][j]
                    - self.__data[i - 1][j - 1]
                )

    def fold(self, up: int, left: int, down: int, right: int) -> int:
        return (
            self.__data[down][right]
            - self.__data[up][right]
            - self.__data[down][left]
            + self.__data[up][left]
        )
""",
)

sys.meta_path.append(BundleImporter)

from byslib.core.config import procon_setup
from byslib.core.const import IINF, MOD
from byslib.core.fastio import debug, int1, readline, sinput
from byslib.data.cumulative_sum import CumulativeSum2D


@procon_setup
def main(**kwargs) -> None:
    n, k = map(int, readline().split())
    v = [[0] * 101 for _ in range(101)]

    for _ in range(n):
        a, b = map(int, readline().split())
        v[a][b] += 1

    cs = CumulativeSum2D(v)

    ans = 0
    for i in range(101):
        for j in range(101):
            a = cs.fold(i, j, min(i + k + 1, 101), min(j + k + 1, 101))
            ans = max(ans, a)

    print(ans)


if __name__ == "__main__":
    t = 1  # * int(readline())
    main(t)

# package infomations
# -----------------------------------------------------------------------------
# byslib-python
#   Version  : 0.1.0
#   Author   : bayashi-cl
#   Home-page: https://bayashi-cl.github.io/byslib-python/
#   License  : CC0
# -----------------------------------------------------------------------------
